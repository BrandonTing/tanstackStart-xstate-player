/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TvShowsImport } from './routes/tvShows'
import { Route as MoviesImport } from './routes/movies'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as DetailTypeIdImport } from './routes/detail/$type/$id'
import { Route as AuthVideoIdImport } from './routes/_auth/video.$id'

// Create/Update Routes

const TvShowsRoute = TvShowsImport.update({
  id: '/tvShows',
  path: '/tvShows',
  getParentRoute: () => rootRoute,
} as any)

const MoviesRoute = MoviesImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DetailTypeIdRoute = DetailTypeIdImport.update({
  id: '/detail/$type/$id',
  path: '/detail/$type/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthVideoIdRoute = AuthVideoIdImport.update({
  id: '/video/$id',
  path: '/video/$id',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/movies': {
      id: '/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesImport
      parentRoute: typeof rootRoute
    }
    '/tvShows': {
      id: '/tvShows'
      path: '/tvShows'
      fullPath: '/tvShows'
      preLoaderRoute: typeof TvShowsImport
      parentRoute: typeof rootRoute
    }
    '/_auth/video/$id': {
      id: '/_auth/video/$id'
      path: '/video/$id'
      fullPath: '/video/$id'
      preLoaderRoute: typeof AuthVideoIdImport
      parentRoute: typeof AuthImport
    }
    '/detail/$type/$id': {
      id: '/detail/$type/$id'
      path: '/detail/$type/$id'
      fullPath: '/detail/$type/$id'
      preLoaderRoute: typeof DetailTypeIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthVideoIdRoute: typeof AuthVideoIdRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthVideoIdRoute: AuthVideoIdRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/movies': typeof MoviesRoute
  '/tvShows': typeof TvShowsRoute
  '/video/$id': typeof AuthVideoIdRoute
  '/detail/$type/$id': typeof DetailTypeIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/movies': typeof MoviesRoute
  '/tvShows': typeof TvShowsRoute
  '/video/$id': typeof AuthVideoIdRoute
  '/detail/$type/$id': typeof DetailTypeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/movies': typeof MoviesRoute
  '/tvShows': typeof TvShowsRoute
  '/_auth/video/$id': typeof AuthVideoIdRoute
  '/detail/$type/$id': typeof DetailTypeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/movies'
    | '/tvShows'
    | '/video/$id'
    | '/detail/$type/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/movies' | '/tvShows' | '/video/$id' | '/detail/$type/$id'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/movies'
    | '/tvShows'
    | '/_auth/video/$id'
    | '/detail/$type/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  MoviesRoute: typeof MoviesRoute
  TvShowsRoute: typeof TvShowsRoute
  DetailTypeIdRoute: typeof DetailTypeIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  MoviesRoute: MoviesRoute,
  TvShowsRoute: TvShowsRoute,
  DetailTypeIdRoute: DetailTypeIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/movies",
        "/tvShows",
        "/detail/$type/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/video/$id"
      ]
    },
    "/movies": {
      "filePath": "movies.tsx"
    },
    "/tvShows": {
      "filePath": "tvShows.tsx"
    },
    "/_auth/video/$id": {
      "filePath": "_auth/video.$id.tsx",
      "parent": "/_auth"
    },
    "/detail/$type/$id": {
      "filePath": "detail/$type/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
